Macro DeployComptroller price=1.0
    Unitroller Deploy
    PriceOracle Deploy Fixed price
    PriceOracleProxy Deploy Admin (PriceOracle Address) (Address Zero) (Address Zero) (Address Zero) (Address Zero) (Address Zero)
    ComptrollerImpl Deploy Scenario ComptrollerScen
    Unitroller SetPendingImpl ComptrollerScen
    ComptrollerImpl ComptrollerScen Become
    Comptroller SetPriceOracle (PriceOracleProxy Address)
    Comptroller SetCloseFactor 0.5
    Comptroller LiquidationIncentive 1.1

Macro SetupMarkets
    NewAToken ZRX aZRX
    NewAToken BAT aBAT
    Support aZRX collateralFactor:0.5
    Support aBAT collateralFactor:0.5

Macro SetupArsToken arsInitAmount=5000000e18
    Erc20 Deploy Standard ARS "ARS Token" 18
    Give (Address Comptroller) arsInitAmount ARS
    Comptroller Send "setArsAddress(address)" (Address ARS)

-- NewComptroller, but with markets listed so that we can make them ars markets in constructor
Macro FlywheelComptroller price=1.0 borrowRate=0.000005 arsInitAmount=5000000e18
    DeployComptroller price
    SetupMarkets
    SetupArsToken arsInitAmount

Macro InitUsage
    Prep Geoff 100e18 ZRX aZRX
    Mint Geoff 50e18 aZRX--tokenbalance = 50e18 / 2e9 = 2.5e10
    Prep Coburn Some BAT aBAT
    Mint Coburn 6e18 aBAT--tokenbalance = 6e18 / 2e9 = 3e9
    EnterMarkets Coburn aBAT
    Borrow Coburn 1e18 aZRX

Macro InitUsage2
    Prep Geoff 100e18 ZRX aZRX
    Mint Geoff 50e18 aZRX--tokenbalance = 50e18 / 2e9 = 2.5e10
    Prep Coburn 100e18 BAT aBAT
    Mint Coburn 50e18 aBAT--tokenbalance = 6e18 / 2e9 = 3e9
    EnterMarkets Coburn aBAT

Test "Market supply and borrow states properly initialized"
    DeployComptroller
    FastForward 100 Blocks
    SetupMarkets
    Assert Equal (Comptroller ArsSupplyState aZRX "index") 1e36
    Assert Equal (Comptroller ArsSupplyState aZRX "block") 100
    Assert Equal (Comptroller ArsBorrowState aZRX "index") 1e36
    Assert Equal (Comptroller ArsBorrowState aZRX "block") 100
    Assert Equal (Comptroller ArsSupplyState aBAT "index") 1e36
    Assert Equal (Comptroller ArsSupplyState aBAT "block") 100
    Assert Equal (Comptroller ArsBorrowState aBAT "index") 1e36
    Assert Equal (Comptroller ArsBorrowState aBAT "block") 100

Test "Accrue supplier ARS during a mint"
    FlywheelComptroller
    InitUsage
    Comptroller SetArsSpeeds (aZRX) (0.01e18) (0)
    Assert Equal (Comptroller ArsSupplyState aZRX "index") 1000000000000000000000000000000000000
    FastForward 300000 Blocks
    Assert Equal (Comptroller ArsAccrued Geoff) 0
    Mint Geoff 1e18 aZRX
    Assert Equal (Comptroller ArsAccrued Geoff) 3000e18 -- 0.01e18 * 300,000
    Assert Equal (Comptroller ArsSupplyState aZRX "index") 120000000001000000000000000000000000000000000000
    Assert Equal (Comptroller ArsSupplyState aZRX "block") 300000
    Assert Equal (Erc20 ARS TokenBalance Geoff) 0
    Comptroller ClaimArs Geoff
    Assert Equal (Erc20 ARS TokenBalance Geoff) (3000e18)

Test "Accrue borrower ARS during a borrow"
    FlywheelComptroller
    InitUsage
    Comptroller SetArsSpeeds (aZRX) (0.01e18) (0.01e18)
    Assert Equal (Comptroller ArsBorrowState aZRX "index") 1000000000000000000000000000000000000
    FastForward 300000 Blocks
    Assert Equal (Comptroller ArsAccrued Coburn) 0
    Assert Equal (Comptroller ArsBorrowerIndex aZRX Coburn) 1000000000000000000000000000000000000
    Borrow Coburn 0.1e18 aZRX
    Assert Equal (Comptroller ArsAccrued Coburn) (3000e18)
    Comptroller ClaimArs Coburn
    Assert Equal (Comptroller ArsBorrowState aZRX "index") 3.001e39
    Assert Equal (Comptroller ArsBorrowState aZRX "block") 300000
    Assert Equal (Erc20 ARS TokenBalance Coburn) (3000e18)
    Assert Equal (Comptroller ArsBorrowerIndex aZRX Coburn) (3.001e39)

Test "Accrue supplier ARS during redeem"
    FlywheelComptroller
    InitUsage
    Comptroller SetArsSpeeds (aZRX) (0.01e18) (0)
    Assert Equal (Comptroller ArsSupplyState aZRX "index") 1000000000000000000000000000000000000
    FastForward 300000 Blocks
    Assert Equal (Comptroller ArsAccrued Geoff) 0
    Redeem Geoff 1e9 aZRX
    Assert Equal (Comptroller ArsAccrued Geoff) 3000e18 -- 0.01e18 * 300,000
    Assert Equal (Comptroller ArsSupplyState aZRX "index") 120000000001000000000000000000000000000000000000
    Assert Equal (Comptroller ArsSupplyState aZRX "block") 300000
    Assert Equal (Erc20 ARS TokenBalance Geoff) 0
    Comptroller ClaimArs Geoff
    Assert Equal (Erc20 ARS TokenBalance Geoff) (3000e18)

Test "Accrue borrower ARS during a repayBorrow"
    FlywheelComptroller
    InitUsage
    Comptroller SetArsSpeeds (aZRX) (0.01e18) (0.01e18)
    Assert Equal (Comptroller ArsBorrowState aZRX "index") 1000000000000000000000000000000000000
    FastForward 300000 Blocks
    Assert Equal (Comptroller ArsAccrued Coburn) 0
    Assert Equal (Comptroller ArsBorrowerIndex aZRX Coburn) 1000000000000000000000000000000000000
    Prep Coburn 0.5e18 ZRX aZRX
    RepayBorrow Coburn 0.5e18 aZRX
    Assert Equal (Comptroller ArsAccrued Coburn) (3000e18)
    Comptroller ClaimArs Coburn
    Assert Equal (Comptroller ArsBorrowState aZRX "index") 3.001e39
    Assert Equal (Comptroller ArsBorrowState aZRX "block") 300000
    Assert Equal (Erc20 ARS TokenBalance Coburn) (3000e18)
    Assert Equal (Comptroller ArsBorrowerIndex aZRX Coburn) (3.001e39)

Test "Accrue borrower ARS during a repayBorrowBehalf of 0"
    FlywheelComptroller
    InitUsage
    Comptroller SetArsSpeeds (aZRX) (0.01e18) (0.01e18)
    Assert Equal (Comptroller ArsBorrowState aZRX "index") 1000000000000000000000000000000000000
    FastForward 300000 Blocks
    Assert Equal (Comptroller ArsAccrued Coburn) 0
    Assert Equal (Comptroller ArsBorrowerIndex aZRX Coburn) 1000000000000000000000000000000000000
    RepayBorrowBehalf Jared Coburn 0 aZRX
    Assert Equal (Comptroller ArsAccrued Coburn) (3000e18)
    Comptroller ClaimArs Coburn
    Assert Equal (Comptroller ArsBorrowState aZRX "index") 3.001e39
    Assert Equal (Comptroller ArsBorrowState aZRX "block") 300000
    Assert Equal (Erc20 ARS TokenBalance Coburn) (3000e18)
    Assert Equal (Comptroller ArsBorrowerIndex aZRX Coburn) (3.001e39)

-- TODO: Test "Accrue ARS during a liquidation"

Test "Don't accrue borrower ARS during a transfer"
    FlywheelComptroller
    InitUsage
    Comptroller SetArsSpeeds (aZRX) (0.01e18) (0.01e18)
    Assert Equal (Comptroller ArsBorrowState aZRX "index") 1000000000000000000000000000000000000
    FastForward 300000 Blocks
    Assert Equal (Comptroller ArsAccrued Coburn) 0
    Assert Equal (Comptroller ArsBorrowerIndex aZRX Coburn) 1000000000000000000000000000000000000
    Transfer Coburn Jared 1 aBAT
    Assert Equal (Comptroller ArsAccrued Coburn) (0) -- Ars not accrued until Claim
    Comptroller ClaimArs Coburn
    Assert Equal (Comptroller ArsBorrowState aZRX "index") 3.001e39
    Assert Equal (Comptroller ArsBorrowState aZRX "block") 300000
    Assert Equal (Erc20 ARS TokenBalance Coburn) (3000e18)
    Assert Equal (Comptroller ArsBorrowerIndex aZRX Coburn) (3.001e39)

Test "Accrue supplier ARS during a transfer"
    FlywheelComptroller
    InitUsage
    Comptroller SetArsSpeeds (aZRX) (0.01e18) (0)
    Assert Equal (Comptroller ArsSupplyState aZRX "index") 1000000000000000000000000000000000000
    FastForward 300000 Blocks
    Assert Equal (Comptroller ArsAccrued Geoff) 0
    Transfer Geoff Jared 1 aZRX
    Assert Equal (Comptroller ArsAccrued Geoff) 3000e18 -- 0.01e18 * 300,000
    Assert Equal (Comptroller ArsSupplyState aZRX "index") 120000000001000000000000000000000000000000000000
    Assert Equal (Comptroller ArsSupplyState aZRX "block") 300000
    Assert Equal (Erc20 ARS TokenBalance Geoff) 0
    Comptroller ClaimArs Geoff
    Assert Equal (Erc20 ARS TokenBalance Geoff) (3000e18)

Test "Accrues correctly when ARS rewards are added (after market activation), removed, then added again"
    FlywheelComptroller
    Prep Coburn 100000e18 BAT aBAT
    -- Mint test
    From Coburn (AToken aBAT Mint 1000e18)
    FastForward 1 Blocks
    -- Ensure no ARS rewards distributed
    Comptroller ClaimArs Coburn
    Assert Equal (Erc20 ARS TokenBalance Coburn) (0)
    -- Fast forward to make us accrue a ton of interest (that is, if ARS speed has been non-zero)
    FastForward 2354251 Blocks
    -- Set ARS speeds to non-zero
    Comptroller SetArsSpeeds (aBAT) (1) (1)
    FastForward 2 Blocks
    -- Ensure minting still works
    From Coburn (AToken aBAT Mint 1000e18)
    -- Ensure we only accrued interest while the ARS speed has been non-zero
    Comptroller ClaimArs Coburn
    Assert Equal (Erc20 ARS TokenBalance Coburn) (2)
    -- Set ARS speeds to zero
    Comptroller SetArsSpeeds (aBAT) (0) (0)
    FastForward 1 Blocks
    -- Ensure we only accrued interest while the ARS speed has been non-zero
    Comptroller ClaimArs Coburn
    Assert Equal (Erc20 ARS TokenBalance Coburn) (2)
    -- Fast forward to make us accrue a ton of interest - we shouldn't as the rate is 0
    FastForward 2354251 Blocks
    -- Set ARS speeds to non-zero
    Comptroller SetArsSpeeds (aBAT) (1) (1)
    FastForward 1 Blocks
    -- Ensure minting still works
    From Coburn (AToken aBAT Mint 1000e18)
    -- Ensure we only accrued interest while the ARS speed has been non-zero
    Comptroller ClaimArs Coburn
    Assert Equal (Erc20 ARS TokenBalance Coburn) (3)

Test "TransferArs handles running out of ARS in comptroller correctly"
    FlywheelComptroller price:1.0 borrowRate:0.000005 arsInitAmount:1e18
    InitUsage
    Comptroller SetArsSpeeds (aZRX) (1e18) (0)
    FastForward 2 Blocks
    Comptroller ClaimArs Geoff
    Assert Equal (Comptroller ArsAccrued Geoff) 2e18
    Assert Equal (Erc20 ARS TokenBalance Geoff) 0
    Give (Address Comptroller) 1e18 ARS
    Comptroller ClaimArs Geoff
    Assert Equal (Comptroller ArsAccrued Geoff) 0
    Assert Equal (Erc20 ARS TokenBalance Geoff) 2e18

Test "Ars is not claimed automatically"
    FlywheelComptroller
    InitUsage
    Comptroller SetArsSpeeds (aZRX) (2) (2)
    FastForward 100000 Blocks
    -- Check ars is not claimed automatically
    Mint Geoff 50e18 aZRX
    Assert Equal (Erc20 ARS TokenBalance Geoff) 0
    -- Confirm there was ars to claim
    Comptroller ClaimArs Geoff
    Assert Equal (Erc20 ARS TokenBalance Geoff) 200000

Test "New ARS speeds apply to both prior borrowers+suppliers and later borrowers+suppliers correctly"
    -- Supplying
    --   Torrey mints 100e18 before ARS speeds set
    --   Jared mints 100e18 after ARS speeds set
    -- Borrowing
    --   Coburn borrows 10e18 before ARS speeds set
    --   Geoff borrows 10e18 after ARS speeds set
    FlywheelComptroller
    InitUsage2
    -- New token with no rewards
    NewAToken YFI cYFI
    Support cYFI collateralFactor:0.5
    Prep Torrey 100e18 YFI cYFI
    Mint Torrey 100e18 cYFI
    Prep Jared 100e18 YFI cYFI
    Borrow Coburn 10e18 cYFI
    EnterMarkets Geoff aZRX
    -- Add ARS rewards for the new token
    Comptroller SetArsSpeeds (cYFI) (2) (2)
    Mint Jared 100e18 cYFI
    Borrow Geoff 10e18 cYFI
    Assert Equal (Comptroller ArsBorrowerIndex cYFI Coburn) 1e36
    Assert Equal (Comptroller ArsBorrowerIndex cYFI Geoff) 1e36
    Assert Equal (Comptroller ArsSupplierIndex cYFI Torrey) 1e36
    Assert Equal (Comptroller ArsSupplierIndex cYFI Jared) 1e36
    FastForward 1000 blocks
    Comptroller ClaimArs Jared
    Comptroller ClaimArs Torrey
    Comptroller ClaimArs Geoff
    Comptroller ClaimArs Coburn
    Assert Equal (Erc20 ARS TokenBalance Coburn) 1000
    Assert Equal (Erc20 ARS TokenBalance Geoff) 1000
    Assert Equal (Erc20 ARS TokenBalance Jared) 1000
    Assert Equal (Erc20 ARS TokenBalance Torrey) 1000
    Assert Equal (Comptroller ArsAccrued Coburn) 0
    Assert Equal (Comptroller ArsAccrued Geoff) 0
    Assert Equal (Comptroller ArsAccrued Jared) 0
    Assert Equal (Comptroller ArsAccrued Torrey) 0
    Assert Equal (Comptroller ArsBorrowerIndex cYFI Coburn) (Comptroller ArsBorrowerIndex cYFI Geoff)
    Assert Equal (Comptroller ArsSupplierIndex cYFI Jared) (Comptroller ArsSupplierIndex cYFI Torrey)

Test "New ARS speeds apply to both prior borrowers+suppliers and later borrowers+suppliers correctly w/ uninitialized prior borrower/supplier state indices"
    -- Supplying
    --   Torrey mints 100e18 before ARS speeds set
    --   Jared mints 100e18 after ARS speeds set
    -- Borrowing
    --   Coburn borrows 10e18 before ARS speeds set
    --   Geoff borrows 10e18 after ARS speeds set
    FlywheelComptroller
    InitUsage2
    -- New token with no rewards
    NewAToken YFI cYFI
    Support cYFI collateralFactor:0.5
    Prep Torrey 100e18 YFI cYFI
    Mint Torrey 100e18 cYFI
    Prep Jared 100e18 YFI cYFI
    Borrow Coburn 10e18 cYFI
    EnterMarkets Geoff aZRX
    -- Set borrower and supplier state indices to 0 (uninitialized - before all market state indices were initialized properly)
    Comptroller Send "setArsBorrowerIndex(address,address,uint256)" (Address cYFI) (Address Coburn) 0
    Comptroller Send "setArsSupplierIndex(address,address,uint256)" (Address cYFI) (Address Torrey) 0
    -- Add ARS rewards for the new token
    Comptroller SetArsSpeeds (cYFI) (2) (2)
    Mint Jared 100e18 cYFI
    Borrow Geoff 10e18 cYFI
    Assert Equal (Comptroller ArsBorrowerIndex cYFI Coburn) 0
    Assert Equal (Comptroller ArsBorrowerIndex cYFI Geoff) 1e36
    Assert Equal (Comptroller ArsSupplierIndex cYFI Torrey) 0
    Assert Equal (Comptroller ArsSupplierIndex cYFI Jared) 1e36
    FastForward 1000 blocks
    Comptroller ClaimArs Jared
    Comptroller ClaimArs Torrey
    Comptroller ClaimArs Geoff
    Comptroller ClaimArs Coburn
    Assert Equal (Erc20 ARS TokenBalance Coburn) 1000
    Assert Equal (Erc20 ARS TokenBalance Geoff) 1000
    Assert Equal (Erc20 ARS TokenBalance Jared) 1000
    Assert Equal (Erc20 ARS TokenBalance Torrey) 1000
    Assert Equal (Comptroller ArsAccrued Coburn) 0
    Assert Equal (Comptroller ArsAccrued Geoff) 0
    Assert Equal (Comptroller ArsAccrued Jared) 0
    Assert Equal (Comptroller ArsAccrued Torrey) 0
    Assert Equal (Comptroller ArsBorrowerIndex cYFI Coburn) (Comptroller ArsBorrowerIndex cYFI Geoff)
    Assert Equal (Comptroller ArsSupplierIndex cYFI Jared) (Comptroller ArsSupplierIndex cYFI Torrey)

Test "Zero ARS speed markets don't accrue rewards w/ uninitialized borrower/supplier state indices"
    -- Supplying
    --   Torrey mints 100e18 before ARS speeds set
    --   Jared mints 100e18 after ARS speeds set
    -- Borrowing
    --   Coburn borrows 10e18 before ARS speeds set
    --   Geoff borrows 10e18 after ARS speeds set
    FlywheelComptroller
    InitUsage2
    -- New token with no rewards
    NewAToken YFI cYFI
    Support cYFI collateralFactor:0.5
    Prep Torrey 100e18 YFI cYFI
    Mint Torrey 100e18 cYFI
    Prep Jared 100e18 YFI cYFI
    Borrow Coburn 10e18 cYFI
    EnterMarkets Geoff aZRX
    -- Set borrower and supplier state indices to 0 (uninitialized - before all market state indices were initialized properly)
    Comptroller Send "setArsBorrowerIndex(address,address,uint256)" (Address cYFI) (Address Coburn) 0
    Comptroller Send "setArsSupplierIndex(address,address,uint256)" (Address cYFI) (Address Torrey) 0
    Mint Jared 100e18 cYFI
    Borrow Geoff 10e18 cYFI
    Assert Equal (Comptroller ArsBorrowerIndex cYFI Coburn) 0
    Assert Equal (Comptroller ArsBorrowerIndex cYFI Geoff) 1e36
    Assert Equal (Comptroller ArsSupplierIndex cYFI Torrey) 0
    Assert Equal (Comptroller ArsSupplierIndex cYFI Jared) 1e36
    FastForward 1000 blocks
    Comptroller ClaimArs Jared
    Comptroller ClaimArs Torrey
    Comptroller ClaimArs Geoff
    Comptroller ClaimArs Coburn
    Assert Equal (Erc20 ARS TokenBalance Coburn) 0
    Assert Equal (Erc20 ARS TokenBalance Geoff) 0
    Assert Equal (Erc20 ARS TokenBalance Jared) 0
    Assert Equal (Erc20 ARS TokenBalance Torrey) 0
    Assert Equal (Comptroller ArsAccrued Coburn) 0
    Assert Equal (Comptroller ArsAccrued Geoff) 0
    Assert Equal (Comptroller ArsAccrued Jared) 0
    Assert Equal (Comptroller ArsAccrued Torrey) 0
    Assert Equal (Comptroller ArsBorrowerIndex cYFI Coburn) (Comptroller ArsBorrowerIndex cYFI Geoff)
    Assert Equal (Comptroller ArsSupplierIndex cYFI Jared) (Comptroller ArsSupplierIndex cYFI Torrey)
